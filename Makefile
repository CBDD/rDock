# Custom Makefile for direct compilation and installation of the rDock library and binaries
# 2023-03-31, Zaragoza, Spain
# 
# How to use this Makefile:
#
# set any environment variables you need to set before (or while) invoking make with the desired target, e.g.:
#   export CXX=g++-7; make -j 4
# or
#   CXX=g++-9 PREFIX=~/.local make -j 4
#
# the following targets are available for the user:
#   build: build the library and binaries (default target)
#   build_lib: build the library
#   build_bin: build the binaries
#   test: run the tests suite
#   test_dock_run: run rbdock and compare results with a reference run
#   test_rbcavity: generates 
#   clean: removes the object files
#   clean_lib: removes the lib folder
#   clean_bin: removes the compiled binaries
#   clean_tests: removes the files generated by test execution
#   veryclean: removes all the above
#   install: install the library, binaries, and headers in PREFIX folder
#   full: cleans everything and rebuilds the library and binaries from scratch,
#         then runs the tests and install everything into PREFIX folder
#   lint: format the code using clang-format. Requires clang-format to be installed
#         it is recommended to run this target before committing any changes to the code
#         as the CI will fail if the code is not properly formatted.
#
#
# the following variables can be configured by the user:
#   CONFIG: the configuration to build. Can be DEBUG or RELEASE. Default: RELEASE
#           if DEBUG is set, the library and binaries are built with debug symbols and
#           the -D_DEBUG macro is defined, making the code more verbose (but slower).
#
#   PREFIX: the folder where to install the library, binaries, and headers. Default: /usr
#
#   CXX: the c++ compiler to use. Default: g++
#
#   CXX_EXTRA_FLAGS: extra flags to pass to the compiler. Default: empty
#
#   LEGACY_BUILD: set to YES for legacy systems that do not support modern c++ standards (like centos7)
#                 this will enable the -fpermissive and -Wno-deprecated options too.
#                 legacy build is deprecated, disabled by default, and will be removed in future
#                 releases.
#

PREFIX                      ?= /usr
CONFIG                      ?= RELEASE
CXX                         ?= g++

LEGACY_BUILD                ?= NO
ifeq ($(LEGACY_BUILD),YES)
	CXX_STD                 ?= c++11
	CXX_BASE_FLAGS          += -Wno-deprecated -fpermissive
else
	CXX_BASE_FLAGS          += -Wall
	CXX_STD                 ?= c++14
endif

CXX_EXTRA_FLAGS             ?=
CXX_BASE_FLAGS              += -pipe -std=$(CXX_STD) -fPIC
CXX_DEBUG_CONFIG_FLAGS      += -O0 -g
CXX_RELEASE_CONFIG_FLAGS    += -O3 -ffast-math
CXX_WARNING_FLAGS           +=

DEBUG_DEFINES               := -D_DEBUG
RELEASE_DEFINES             := -D_NDEBUG

ifeq ($(CONFIG),DEBUG)
	CXX_CONFIG_FLAGS        += $(CXX_DEBUG_CONFIG_FLAGS)
	DEFINES                 += $(DEBUG_DEFINES)
else
	CXX_CONFIG_FLAGS        += $(CXX_RELEASE_CONFIG_FLAGS)
	DEFINES                 += $(RELEASE_DEFINES)
endif

CXX_FLAGS                   := $(CXX_BASE_FLAGS) $(CXX_CONFIG_FLAGS) $(CXX_WARNING_FLAGS) $(CXX_EXTRA_FLAGS) $(DEFINES)
LINK_FLAGS                  := -shared
LIB_DEPENDENCIES            := -lpopt -lm -lstdc++
LIBS                        += $(LIB_DEPENDENCIES) -lRbt
INCLUDE                     := $(addprefix -I./, $(shell find include/ -type d )) $(addprefix -I./, $(shell find import/ -type d ))
LIBRARY                     := ./lib


simplex_sources = $(shell find import/simplex/src/ -type f -name '*.cxx')
simplex_objects = $(subst import/simplex/src, obj/simplex, $(simplex_sources:.cxx=.o))

GP_sources      = $(shell find src/GP/ -type f -name 'Rbt*.cxx')
GP_objects      = $(subst src/GP/, obj/GP/, $(GP_sources:.cxx=.o))

RBT_sources     = $(shell find src/lib/ -type f -name '*.cxx')
RBT_objects     = $(subst src/lib/, obj/, $(RBT_sources:.cxx=.o))

objects         = $(RBT_objects) $(simplex_objects) $(GP_objects)

objdirs         = obj obj/simplex obj/GP
$(shell mkdir -p $(objdirs) ./lib ./bin)

bin_names   = rbdock rbcavity rbmoegrid rblist rbcalcgrid
bins        = $(addprefix bin/, $(bin_names))
bin_sources = $(addprefix src/exe/, $(addsuffix .cxx $(bins)))


.PHONY:	\
	install \
	target_folders build_directories \
	lib bin scripts \
	build build_lib build_bin \
	test test_dock_run test_rbcavity \
	clean clean_bin clean_lib veryclean \
	lint lint-check \
	targets help \

## User directed targets

build: build_lib build_bin scripts ## build the library and binaries (default target)

install: build target_folders ## install the library, binaries, and headers in PREFIX folder
	@cp -r bin/* $(PREFIX)/bin
	@cp -r lib/* $(PREFIX)/lib
	@cp -r include/* $(PREFIX)/include

full: ## equivalent to veryclean build test install
	$(MAKE) veryclean
	$(MAKE) build
	$(MAKE) test
	$(MAKE) install

build_bin: build_directories
	$(MAKE) $(bins)

build_lib: build_directories
	$(MAKE) lib

test: build ## run the tests suite
	$(MAKE) test_rbcavity test_dock_run

test_dock_run: build tests/data/1YET_test.as
	mkdir -p tests/results
	cd tests/data ; RBT_ROOT=../.. LD_LIBRARY_PATH=../../lib:$(LD_LIBRARY_PATH) ../../bin/rbdock -r1YET_test.prm -i 1YET_c.sd -p dock.prm -n 1 -s 48151623 -o ../results/1YET_test_out > ../results/1YET_test_out.log
	
	@tests/scripts/check_results.sh ./tests/data/1YET_reference_out.sd ./tests/results/1YET_test_out.sd

test_rbcavity: tests/data/1koc.as tests/data/1YET.as tests/data/1YET_test.as

clean: ## removes the object files and folder
	@rm -rf obj

clean_bin: ## removes the compiled binaries and bin folder
	@rm -f $(bins)

clean_lib: ## removes the compiled library file, libRbt.so
	@rm -f lib/libRbt.so

clean_tests: ## removes the files generated by test execution
	@rm -rf tests/results tests/data/*.as

veryclean: clean clean_bin clean_lib clean_tests ## equivalent to clean clean_bin clean_lib clean_tests

lint: ## format the code using clang-format. Requires clang-format to be installed
	@clang-format --style=file -i $(shell find src/ include/ -iname '*.cxx' -o -iname '*.h')


## Internal targets

target_folders:
	@mkdir -p $(PREFIX)/bin $(PREFIX)/lib $(PREFIX)/include

build_directories:
	@mkdir -p $(objdirs) ./lib ./bin ./log ./tests/tmp

obj/%.o: src/lib/%.cxx
	@echo $(CXX) $(CXX_FLAGS) $(INCLUDE) -c -o $@ $<
	@$(CXX) $(CXX_FLAGS) $(INCLUDE) -c -o $@ $<

obj/simplex/%.o: import/simplex/src/%.cxx
	@echo $(CXX) $(CXX_FLAGS) $(INCLUDE) -c -o $@ $<
	$(CXX) $(CXX_FLAGS) $(INCLUDE) -c -o $@ $<

obj/GP/%.o: src/GP/%.cxx
	@echo $(CXX) $(CXX_FLAGS) $(INCLUDE) -c -o $@ $<
	$(CXX) $(CXX_FLAGS) $(INCLUDE) -c -o $@ $<

scripts: build_directories
	@cp -r scripts/* bin/

lib: lib/libRbt.so

lib/libRbt.so: $(objects)
	$(CXX) $(CXX_FLAGS) -shared -L$(LIBRARY) $^ -o lib/libRbt.so $(LIB_DEPENDENCIES)

bin/%: src/exe/%.cxx lib/libRbt.so
	$(CXX) $(CXX_FLAGS) $(INCLUDE) -L$(LIBRARY) -o $@ $< $(LIBS)

tests/data/%.as: tests/data/%.prm bin/rbcavity
	cd tests/data ; RBT_ROOT=../.. LD_LIBRARY_PATH=../../lib:$(LD_LIBRARY_PATH) ../../bin/rbcavity -r$(notdir $<) -was

lint-check:
	@echo "Checking code style..."
	# --ferror-limit=1 is used to stop the execution after the first error until we fix all the code
	@clang-format --style=file -Werror --dry-run --ferror-limit=1 $(shell find src/ include/ -iname '*.cxx' -o -iname '*.h')

targets:  ## Display this help
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) |\
	awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

help:  ## detailed help
	@ awk '/^#/ {print; next} {if (NR>1) exit}' $(MAKEFILE_LIST) | sed -e 's/^#//'