#!/usr/bin/perl
# Called by Makefile (DO NOT CALL DIRECTLY)
#
# Generates a platform-specific makefile for compiling
# all the rDock executables. Compiler flags are
# pulled out of the tmake.conf files so that flags are
# only defined in one common location.
#
# Options: -t<tmakelib> - platform/compiler name
#                         e.g. "linux-g++"
#          -c<config>   - either "release" or "debug"
#          -o<makefile> - name of makefile to generate
#
my $tmakeroot = "./tmakelib";
#
# Default values, should never be used
# as all should be passed as command-line args from Makefile
my $tmakelib = "linux-g++";
my $config = "release";
my $makefile = "Makefile.${tmakelib}-${config}-exe";

# Parse the command-line options
while (scalar(@ARGV)) {
  my $arg = shift @ARGV;
  if (index($arg,'-t')==0) {
      $tmakelib = substr($arg,2);
  }
  elsif (index($arg,'-c')==0) {
      $config = substr($arg,2);
  }
  elsif (index($arg,'-o')==0) {
      $makefile = substr($arg,2);
  }
}
my $tmakeconf = "${tmakeroot}/${tmakelib}/tmake.conf";
my $destdir = "${tmakelib}/${config}/exe";
my $objdir = "${tmakelib}/${config}/obj";
my $libdir = "${tmakelib}/${config}/lib";

# Read the tmake.conf file
open TMAKECONF,$tmakeconf;
my @lines = grep /^TMAKE/,<TMAKECONF>;
close TMAKECONF;

# Write the Makefile
my $maketime = localtime;
open MAKEFILE,">$makefile";
print MAKEFILE "\# Makefile for building rDock executables\n";
print MAKEFILE "\# Generated by exemake at $maketime\n";
print MAKEFILE convert(grep /^TMAKE_CC\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CFLAGS\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CFLAGS_WARN_OFF\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CFLAGS_SHLIB\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CXX\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CXXFLAGS\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CXXFLAGS_WARN_OFF\t/,@lines);
print MAKEFILE convert(grep /^TMAKE_CXXFLAGS_SHLIB\t/,@lines);
if ($config eq "release") {
    print MAKEFILE convert(grep /^TMAKE_CFLAGS_RELEASE\t/,@lines);
    print MAKEFILE convert(grep /^TMAKE_CXXFLAGS_RELEASE\t/,@lines);
    print MAKEFILE "TMAKE_CFLAGS_CONFIG\t= \$(TMAKE_CFLAGS) \$(TMAKE_CFLAGS_WARN_OFF) \$(TMAKE_CFLAGS_SHLIB) \$(TMAKE_CFLAGS_RELEASE)\n";
    print MAKEFILE "TMAKE_CXXFLAGS_CONFIG\t= \$(TMAKE_CXXFLAGS) \$(TMAKE_CXXFLAGS_WARN_OFF) \$(TMAKE_CXXFLAGS_SHLIB) \$(TMAKE_CXXFLAGS_RELEASE)\n";
    print MAKEFILE "DEFINES\t\t\t= -D_NDEBUG\n";
}
else {
    print MAKEFILE convert(grep /^TMAKE_CFLAGS_DEBUG\t/,@lines);
    print MAKEFILE convert(grep /^TMAKE_CXXFLAGS_DEBUG\t/,@lines);
    print MAKEFILE "TMAKE_CFLAGS_CONFIG\t= \$(TMAKE_CFLAGS) \$(TMAKE_CFLAGS_WARN_OFF) \$(TMAKE_CFLAGS_SHLIB) \$(TMAKE_CFLAGS_DEBUG)\n";
    print MAKEFILE "TMAKE_CXXFLAGS_CONFIG\t= \$(TMAKE_CXXFLAGS) \$(TMAKE_CXXFLAGS_WARN_OFF) \$(TMAKE_CXXFLAGS_SHLIB) \$(TMAKE_CXXFLAGS_DEBUG)\n";
    print MAKEFILE "DEFINES\t\t\t= -D_DEBUG\n";
}
print MAKEFILE "DESTDIR\t\t\t= $destdir\n";
print MAKEFILE "OBJECTS_DIR\t\t\t= $objdir\n";
print MAKEFILE "LIBDIR\t\t\t= $libdir\n";
print MAKEFILE "include makeprogs\n";
close MAKEFILE;

# Make the destination directory
system ("mkdir -p $destdir\n");

# Borrowed from tmake
# Converts strings of the form $$TMAKE_CFLAGS
# into $(TMAKE_CFLAGS) for use in Makefile
sub convert {
    my($v) = @_;
    my($c);
    return "" if !defined($v);
    $c = 0;
    while ( $c < 100 ) {
	if ( $v =~ s/(\$\$\w+)/\035/ ) {
	    $_ = $1;
	    s/\$\$//g;
	    $v =~ s/\035/\$($_)/g;
            $c++;
        } else {
            $c = 100;
	}
    }
    return $v;
}
