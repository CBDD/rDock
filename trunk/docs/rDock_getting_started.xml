<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book SYSTEM "http://www.docbook.org/xml/4.4/docbookx.dtd">
<book id="rDockGettingStarted" revision="2006.1/865">
    <title>Getting Started with rDock</title>
    <bookinfo>
        <revhistory>
            <revision>
                <revnumber>2006.1 release</revnumber>
                <date>20/09/2006</date>
            </revision>
            <revision>
                <revnumber>Initial draft</revnumber>
                <date>16/03/2006</date>
            </revision>
        </revhistory>
        <author>
            <honorific>Dr</honorific>
            <surname>Morley</surname>
            <firstname>David</firstname>
            <affiliation>
                <orgname>Enspiral Discovery Ltd.</orgname>
            </affiliation>
            <email>d.morley@enspiral-discovery.com</email>
        </author>
        <copyright>
            <year>2006</year>
            <holder>Vernalis</holder>
        </copyright>
    </bookinfo>
    <preface>
        <title>Overview</title>
        <simpara>rDock is a high-throughput molecular docking platform for protein and RNA targets.
            Under development at Vernalis (formerly RiboTargets) since 1998, the software (formerly
            known as RiboDock<footnote>
                <simpara>Validation of an empirical RNA-ligand scoring function for fast flexible
                    docking using RiboDock, SD Morley and M Afshar, J. Comput.-Aided Mol. Des., 18
                    (2004) 189-208.</simpara>
            </footnote>), scoring functions, and search protocols have been refined continuously to
            meet the demands of in-house Structure-Based Drug Discovery (SBDD) projects.</simpara>
        <simpara>The major components of the platform now include fast intermolecular scoring
            functions (van der Waals, polar, desolvation) validated against protein and RNA targets,
            a Genetic Algorithm-based stochastic search engine, a wide variety of external
            SBDD-derived restraint terms (tethered template, pharmacophore, noe distance
            restraints), and novel Genetic Programming-based post-docking filtering. A variety of
            scripts are provided to perform automated validation experiments and to launch virtual
            screening campaigns.</simpara>
        <simpara>This introductory guide is aimed at new users of rDock. It describes the minimal
            set of steps required to build rDock from the source code distribution, and to run one
            of the automated validation experiments provided in the test suite distribution. The
            instructions assume that you are comfortable with simple Linux command line
            administration tasks, and with building Linux applications from make files. Once you are
            familiar with these steps you should proceed to the User and Reference Guide for more
            detailed documentation on the usage of rDock</simpara>
    </preface>
    <chapter>
        <title>Prerequisites</title>
        <formalpara>
            <title>Compilers</title>
            <para>rDock is supplied as source code, which means that you will have to compile the
                binary files (run-time libraries and executable programs) before you can use them.
                rDock has been developed largely on the Linux operating system, most recently with
                the GNU g++ compiler under SuSE 9.2 Pro. The code will almost certainly compile and
                run under other Linux distributions with little or no modification, but no other
                distributions or compilers have been tested extensively to date.</para>
        </formalpara>
        <formalpara>
            <title>Condor</title>
            <para>Although the rDock executables can be run directly from the command line, the
                validation experiment scripts use the <application>Condor</application> High
                Throughput Computing software for automating the process of distributing and
                managing individual docking jobs across a cluster of compute machines. Condor is
                available free of charge for a wide variety of platforms<footnote>
                    <simpara>Condor is available from the University of Wisconsin
                            (<uri>http://www.cs.wisc.edu/condor</uri>)</simpara>
                </footnote>. Installing and configuring Condor is beyond the scope of this guide as
                the Condor configuration is very site-dependent. </para>
        </formalpara>
        <simpara>For full production use, you would typically compile rDock on a separate build
            machine and run the docking calculations on a cluster of compute machines. However, for
            the purposes of getting started, these instructions assume that you will be compiling
            rDock and running the initial validation experiments on the same machine, and that you
            have installed and configured a <emphasis>Personal</emphasis> Condor to manage the jobs
            on that machine. </simpara>
        <formalpara>
            <title>Required packages</title>
            <para>Make sure you have the following packages installed on your machine before you
                continue. The versions listed are appropriate for SuSE 9.2 Pro; other versions may
                be required for your particular Linux distribution.</para>
        </formalpara>
        <table>
            <title>Required packages for building and running rDock</title>
            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Package</entry>
                        <entry>Description</entry>
                        <entry>Required at</entry>
                        <entry>Version</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>gcc</entry>
                        <entry>GNU C compiler</entry>
                        <entry>Compile-time</entry>
                        <entry>3.3.4</entry>
                    </row>
                    <row>
                        <entry>g++</entry>
                        <entry>GNU C++ compiler</entry>
                        <entry>Compile-time</entry>
                        <entry>3.3.4</entry>
                    </row>
                    <row>
                        <entry>popt-devel</entry>
                        <entry>C++ command-line argument processing</entry>
                        <entry>Compile-time</entry>
                        <entry>1.7-190</entry>
                    </row>
                    <row>
                        <entry>cppunit</entry>
                        <entry>C++ unit test framework</entry>
                        <entry>Compile-time</entry>
                        <entry>1.10.2</entry>
                    </row>
                    <row>
                        <entry>popt</entry>
                        <entry>C++ command-line argument processing</entry>
                        <entry>Run-time</entry>
                        <entry>1.7-190</entry>
                    </row>
                    <row>
                        <entry>Condor</entry>
                        <entry>Distributed resource management</entry>
                        <entry>Run-time</entry>
                        <entry>6.6.10</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </chapter>
    <chapter>
        <title>Unpacking the distribution files</title>
        <simpara> The rDock source files and test suite files are provided as independent gzipped
            tar (.tgz) distributions. Depending on your requirements, the two distributions can be
            unpacked to entirely separate locations, or can be unpacked under the same location. In
            this example they are unpacked under the same location. </simpara>
        <table>
            <title>rDock distribution files</title>
            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>File</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>rdock_[CODELINE]_[BUILDNUM]_src.tgz</entry>
                        <entry>rDock source distribution</entry>
                    </row>
                    <row>
                        <entry>RBT_TEST_[DATE].tgz</entry>
                        <entry>Test suite data files and scripts</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <simpara>where [CODELINE], [BUILDNUM], and [DATE] will vary depending on the release.
            [CODELINE] represents the major version string (for example, <literal>2006.1</literal>),
            [BUILDNUM] represents the minor version number (for example, <literal>865</literal>) and
            [DATE] represents a date string (for example, <literal>20060313</literal>).</simpara>
        <procedure>
            <title>Example unpacking procedure</title>
            <step>
                <title>Create a new directory for building rDock.</title>
                <screen>$ mkdir ~/dev</screen>
                <simpara>The directory you created is referred to as [BUILDDIR] in the subsequents
                    steps.</simpara>
            </step>
            <step>
                <title>Copy or download the distribution files to [BUILDDIR].</title>
                <screen>$ cp ~/mydownloads/rdock_2006.1_865_src.tgz ~/dev/
$ cp ~/mydownloads/RBT_TEST_20060313.tgz ~/dev/</screen>
            </step>
            <step>
                <title>Extract the distributions.</title>
                <screen>$ cd ~/dev/
 $ tar xvzf rdock_2006.1_865_src.tgz
 $ tar xvzf RBT_TEST_20060313.tgz</screen>
                <simpara>The distributions contain files with relative path names, and you should
                    find the following subdirectories created under [BUILDDIR]. Note that the
                        <literal>./rdock/2006.1</literal> subdirectory may have a different name
                    depending on the major version string (see above).</simpara>
                <screen>$ find . -type d
.
./rdock
./rdock/2006.1
./rdock/2006.1/fw
./rdock/2006.1/bin
./rdock/2006.1/lib
./rdock/2006.1/src
./rdock/2006.1/src/GP
./rdock/2006.1/src/exe
./rdock/2006.1/src/lib
./rdock/2006.1/src/daylight
./rdock/2006.1/data
./rdock/2006.1/data/sf
./rdock/2006.1/data/pmf
./rdock/2006.1/data/pmf/smoothed
./rdock/2006.1/data/scripts
./rdock/2006.1/data/filters
./rdock/2006.1/docs
./rdock/2006.1/docs/images
./rdock/2006.1/build
./rdock/2006.1/build/test
./rdock/2006.1/build/test/RBT_HOME
./rdock/2006.1/build/tmakelib
./rdock/2006.1/build/tmakelib/unix
./rdock/2006.1/build/tmakelib/linux-pathCC-64
./rdock/2006.1/build/tmakelib/linux-g++-64
./rdock/2006.1/build/tmakelib/linux-g++
./rdock/2006.1/import
./rdock/2006.1/import/nr
./rdock/2006.1/import/nr/src
./rdock/2006.1/import/nr/include
./rdock/2006.1/import/simplex
./rdock/2006.1/import/simplex/src
./rdock/2006.1/import/simplex/include
./rdock/2006.1/include
./rdock/2006.1/include/GP
./RBT_TEST
./RBT_TEST/na
./RBT_TEST/bin
./RBT_TEST/ccdc_astex</screen>
            </step>
            <step>
                <title>Make a note of the following locations for later use.</title>
                <simpara>The test suite root directory is <literal>[BUILDDIR]/RBT_TEST/</literal>
                    and will be referred to as <literal>[RBT_TEST]</literal> in later instructions.
                    In this example, <literal>[RBT_TEST]</literal> is
                    <literal>~/dev/RBT_TEST/</literal>.</simpara>
                <simpara>The rDock root directory is <literal>[BUILDDIR]/rdock/[CODELINE]</literal>
                    and will be referred to as <literal>[RBT_ROOT]</literal> in later instructions.
                    In this example, <literal>[RBT_ROOT]</literal> is
                    <literal>~/dev/rdock/2006.1/</literal>.</simpara>
            </step>
        </procedure>
    </chapter>
    <chapter>
        <title>Building rDock</title>
        <simpara>rDock is written in C++ (with a small amount of C code from Numerical Recipes) and
            makes heavy use of the C++ Standard Template Library (STL). The majority of the source
            code is compiled into a single shared library (<literal>libRbt.so</literal>). The
            executable programs themselves are relatively light-weight command-line applications
            linked with <literal>libRbt.so</literal>.</simpara>
        <simpara>The <application>tmake</application> build system (from Trolltech) is used to
            generate makefiles automatically for a particular build target (i.e. combination of
            operating system and compiler). The source distribution comes with
            <application>tmake</application> templates defining the compiler options and flags for
            three Linux build targets (<literal>linux-g++</literal>,
            <literal>linux-g++-64</literal>, and <literal>linux-pathCC-64</literal>). The build
            targets have been tested under SuSE 9.2 (2.6.8-24.18 kernel) with GNU g++ 3.3.4 and
            PathScale pathCC 2.1.</simpara>
        <table>
            <title>Standard <literal>tmake</literal> build targets provided</title>
            <tgroup cols="4">
                <colspec colnum="1" colwidth="2*"/>
                <colspec colnum="2" colwidth="1*"/>
                <colspec colnum="3" colwidth="1*"/>
                <colspec colnum="4" colwidth="3*"/>
                <thead>
                    <row>
                        <entry>Target name</entry>
                        <entry>Architecture</entry>
                        <entry>Compiler</entry>
                        <entry>Compiler flags (release build)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>
                            <literal>linux-g++</literal>
                        </entry>
                        <entry>32-bit Intel</entry>
                        <entry>
                            <literal>g++</literal>
                        </entry>
                        <entry>
                            <literal>-m32 -O3 -ffast-math -march=pentium3 -mcpu=pentium3</literal>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>linux-g++-64</literal>
                        </entry>
                        <entry>64-bit AMD Opteron</entry>
                        <entry>
                            <literal>g++</literal>
                        </entry>
                        <entry>
                            <literal>-m64 -O3 -ffast-math -march=k8 -mcpu=k8</literal>
                        </entry>
                    </row>
                    <row>
                        <entry>
                            <literal>linux-pathCC-64</literal>
                        </entry>
                        <entry>64-bit AMD Opteron</entry>
                        <entry>
                            <literal>pathcc</literal>
                        </entry>
                        <entry>
                            <literal>-Ofast -ffast-math -march=opteron -mtune=opteron</literal>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <formalpara>
            <title>Customising the tmake template for a build target</title>
            <para>If none of the tmake templates are suitable for your machine, or if you wish to
                customise the compiler options, you should first customise one of the existing
                templates. The tmake template files are stored under
                    <literal>[RBT_ROOT]/build/tmakelib/</literal>. Locate and edit the
                    <literal>tmake.conf</literal> file for the build target you wish to customise.
                For example, to customise the <literal>linux-g++</literal> build target, edit
                    <literal>[RBT_ROOT]/build/tmakelib/linux-g++/tmake.conf</literal> and localise
                the values to suit your compiler. </para>
        </formalpara>
        <procedure>
            <title>rDock build procedure</title>
            <simpara>To build rDock, first go to the <literal> [RBT_ROOT]/build/</literal>
                directory.</simpara>
            <screen>$ cd [RBT_ROOT]/build</screen>
            <step>
                <title>Compile</title>
                <simpara>Make one of the build targets listed below.</simpara>
                <screen>$ make linux-g++
$ make linux-g++-64
$ make linux-pathCC-64</screen>
            </step>
            <step>
                <title>Test</title>
                <simpara>Run the rDock unit tests to check build integrity. If no failed tests are
                    reported you should be all set.</simpara>
                <screen>$ make test</screen>
            </step>
            <step>
                <title>Install (optional)</title>
                <simpara>You can either run rDock directly from the build location (only recommended
                    for initial testing), or install the binaries and data files to a new location
                    (recommended for production use). To install in a new location [INSTALLDIR],
                    create a binary distribution file, copy the distribution file to [INSTALLDIR],
                    and extract the files.</simpara>
                <screen>
 $ make dist
 $ mkdir -p [INSTALLDIR]
 $ cp rdock_[CODELINE].tgz [INSTALLDIR]
 $ cd [INSTALLDIR]
 $ tar xvzf rdock_[CODELINE].tgz</screen>
            </step>
            <step>
                <title>Cleanup (optional)</title>
                <simpara>To remove all intermediate build files from
                    <literal>[RBT_ROOT]/build/</literal>, leaving just the final executables (in
                        <literal>[RBT_ROOT]/bin/</literal>) and shared libraries (in
                        <literal>[RBT_ROOT]/lib/</literal>):</simpara>
                <screen>$ make clean</screen>
                <simpara>To remove the final executables and shared libraries as well, returning to
                    a source-only distribution:</simpara>
                <screen>$ make distclean</screen>
            </step>
        </procedure>
    </chapter>
    <chapter>
        <title>Running a short validation experiment</title>
        <simpara>Now that you have successfully built the rDock executables you should change your
            working directory away from the installed locations of [RBT_TEST] and [RBT_ROOT], for
            example to a personal project directory. It is not recommended to run validation
            experiments directly within the [RBT_TEST] and [RBT_ROOT] directory hierarchy.</simpara>
        <formalpara>
            <title>The cpu_benchmark experiment</title>
            <para>The <literal>cpu_benchmark</literal> experiment consists of nine protein-ligand
                complexes and two RNA-ligand complexes. It represents a small subset of the full
                rDock docking accuracy validation set and is presented here as the calculations
                should be short enough to run on a single workstation in a few hours. The full
                experiments require access to a cluster of machines to run in a tractable length of
                time. All ligands are non-covalently bound and were chosen to have a range of
                rotatable bond counts (from 0 to 8)</para>
        </formalpara>
        <table>
            <title>Complexes included in the <literal>cpu_benchmark</literal> experiment</title>
            <tgroup cols="3">
                <thead>
                    <row>
                        <entry>Type</entry>
                        <entry>PDB codes</entry>
                        <entry>File source</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Protein-ligand</entry>
                        <entry>
                            <literal>1c1e 5abp 1d3h 1wap 1cil 6rnt 1mld 1mts 1lna</literal>
                        </entry>
                        <entry>Files used intact from CCDC/Astex "clean" high-resolution test
                        set</entry>
                    </row>
                    <row>
                        <entry>RNA-ligand</entry>
                        <entry>
                            <literal>1koc 1byj</literal>
                        </entry>
                        <entry>Prepared by Vernalis</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <formalpara>
            <title>Configuring the environment</title>
            <para>You need to define two environment variables to reflect the location of the test
                suite [RBT_TEST] and the rDock build you wish to test [RBT_ROOT]. Either customise
                the example <literal>setup_validation</literal> script (<literal>bash</literal>
                shell) provided in the [RBT_TEST] directory, and <literal>source</literal> the file,
                or define the environment variables from the command line. You should also add the
                [RBT_TEST]/bin and [RBT_ROOT]/bin directories to your path, and add [RBT_ROOT[/lib
                to your library path. For example, using the directory names used in the example
                unpacking procedure:
                <screen>$ export RBT_TEST=~/dev/RBT_TEST
$ export RBT_ROOT=~/dev/rdock/2006.1
$ export PATH=${RBT_ROOT}/bin:${RBT_TEST}/bin:${PATH}
$ export LD_LIBRARY_PATH=${RBT_ROOT}/lib:${LD_LIBRARY_PATH}</screen>
            </para>
        </formalpara>
        <formalpara>
            <title>Preparing the docking sites</title>
            <para>rDock requires a docking site file (.as suffix) to be defined for each receptor.
                The .as file (also known as an active site file) defines a volume which represents
                the region of the receptor into which each ligand should be docked. This process is
                known as <emphasis>cavity mapping</emphasis> and needs be done only once for each
                receptor prior to running the experiments. The cavity mapping process is quite quick
                (from a few seconds to a few minutes per complex). The active site files (.as)
                themselves and associated rDock output log files are generated "in situ" in
                    <literal>$RBT_TEST/ccdc_astex/ </literal>and <literal>$RBT_TEST/na/</literal>.
                Make sure you have write-access to these directories. The only files you will see in
                your current working directory are the Condor .cmd and .log files. Wait until all
                Condor jobs have completed before moving to the next step.
                <screen>$ make_cavities cpu_benchmark
$ condor_submit cav_cpu_benchmark.cmd
                 </screen></para>
        </formalpara>
        <formalpara>
            <title>Running the experiment</title>
            <para>
                <screen>$ run_cpu_benchmark [TESTDIR]</screen> where <literal>[TESTDIR]</literal> is
                the name of the subdirectory that will be created under your present working
                directory for the experiment output files. This command creates two Condor command
                files and automatically submits the jobs: <simplelist>
                    <member><literal>[TESTDIR]/SF3_100/cpu_benchmark.cmd</literal>: 100 docking runs
                        per complex with standard scoring function (SF3)</member>
                    <member><literal>[TESTDIR]/SF5_100/cpu_benchmark.cmd</literal>: 100 docking runs
                        per complex with solvation scoring function (SF5)</member>
                </simplelist> As a guide, the jobs require around 100 minutes total CPU time on an
                dual-processor AMD Opteron 248 with 2GB RAM, for an average of around three seconds
                per individual docking run.</para>
        </formalpara>
        <formalpara>
            <title>Output files</title>
            <para>After all Condor jobs have completed you should find the following output files
                for each complex in <literal>[TESTDIR]/SF3_100/</literal>and
                    <literal>[TESTDIR]/SF5_100</literal>. <simplelist>
                    <member><literal>s_[PDB].sd</literal> Crystallographic reference ligand pose,
                        with rDock scores (score-only protocol)</member>
                    <member><literal>m_[PDB].sd</literal> Reference ligand pose minimised under
                        rDock scoring function (minimisation protocol)</member>
                    <member><literal>x_[PDB].sd</literal> 100 docked poses (dock protocol)</member>
                </simplelist> Each <literal>.sd</literal> file is accompanied by associated
                    <literal>.out</literal> and <literal>.err</literal> files which contain the
                standard output (rDock output) and standard error for each calculation. </para>
        </formalpara>
        <table id="scoreComponents">
            <title>rDock score components output as SD data fields</title>
            <tgroup cols="2">
                <colspec colnum="1" colname="field" colwidth="1*"/>
                <colspec colnum="2" colname="descr" colwidth="3*"/>
                <spanspec namest="field" nameend="descr" spanname="all"/>
                <thead>
                    <row>
                        <entry>Data field</entry>
                        <entry>Description</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>SCORE</entry>
                        <entry>Total docking score = SCORE.INTER + SCORE.INTRA + SCORE.SYSTEM +
                            SCORE.RESTR</entry>
                    </row>
                    <row>
                        <entry>SCORE.INTER</entry>
                        <entry>Total receptor-ligand intermolecular score</entry>
                    </row>
                    <row>
                        <entry>SCORE.INTRA</entry>
                        <entry>Total ligand intramolecular score</entry>
                    </row>
                    <row>
                        <entry>SCORE.SYSTEM</entry>
                        <entry>Total intra-receptor, intra-solvent, and receptor-solvent
                        score</entry>
                    </row>
                    <row>
                        <entry>SCORE.RESTR</entry>
                        <entry>Total external restraint penalty score</entry>
                    </row>
                    <row>
                        <entry spanname="all"> SCORE.INTER/INTRA/SYSTEM are weighted sums of the
                            individual scoring function terms listed below. Note that the individual
                            scoring function terms are output as raw values, and must be multiplied
                            by their respective weights (not shown here) in order to reconstitute
                            the total scores. </entry>
                    </row>
                    <row>
                        <entry>SCORE.*.VDW</entry>
                        <entry>vdW scores (truncated Tripos 6-12)</entry>
                    </row>
                    <row>
                        <entry>SCORE.*.POLAR</entry>
                        <entry>Attractive polar interactions (empirical geometric function of
                            distances/angles)</entry>
                    </row>
                    <row>
                        <entry>SCORE.*.REPUL</entry>
                        <entry>Repulsive polar interactions (SF3 scoring function only)</entry>
                    </row>
                    <row>
                        <entry>SCORE.*.SOLV</entry>
                        <entry>Desolvation score (weighted SASA, SF5 scoring function only)</entry>
                    </row>
                    <row>
                        <entry>SCORE.*.DIHEDRAL</entry>
                        <entry>Dihedral score calculated over rotatable bonds only</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
        <formalpara>
            <title>Reporting the scores</title>
            <para>The rDock scores for each pose are embedded within each SD data record as listed
                in <xref linkend="scoreComponents"/>. You can use the <literal>sdreport</literal>
                script to output the tabulated scores for each pose. For example:
                <screen>$ sdreport -t x_1koc.sd</screen> will output the top-level score components
                (SCORE, SCORE.INTER, SCORE.INTRA, SCORE.RESTR - also SCORE.INTER.VDW) in
                tab-delimited format. Alternatively you can explicitly list the data fields you wish
                to output: <screen>$ sdreport -tSCORE.INTER.POLAR,SCORE.INTER.VDW x_1koc.sd</screen>
            </para>
        </formalpara>
        <formalpara>
            <title>Calculating the docking accuracy (RMSD)</title>
            <para>Use the <literal>rmsreport</literal> script to generate the SCORE vs RMSD data
                files for further analysis, where RMSD is the Root Mean Squared Deviation between a
                docked ligand pose and the crystallographic reference ligand pose (over
                non-hydrogens only). Run <literal>rmsreport</literal> within each experiment
                directory, with no
                arguments.<screen>$ cd [TESTDIR]/SF3_100
$ rmsreport
$ cd [TESTDIR]/SF5_100
$ rmsreport
</screen>
                rmsreport generates a <literal>[PDB].rmcs</literal> file and an
                <literal>rms[PDB].sd</literal> file for each complex. <literal>rms[PDB].sd</literal>
                is a sorted, filtered copy of x_[PDB].sd with the RMSD value added as an additional
                data field. <literal>[PDB].rmcs</literal> is a tabulated text file with six columns
                where: <simplelist>
                    <member>Col 1: pose number (sorted by total SCORE)</member>
                    <member>Col 2: SCORE</member>
                    <member>Col 3: SCORE.INTER</member>
                    <member>Col 4: SCORE.INTRA</member>
                    <member>Col 5: Root Mean Squared Deviation between pose and crystallographic
                        reference (over non-hydrogens only)</member>
                    <member>Col 6: zero (not used)</member>
                </simplelist>
                <note>
                    <simpara>Poses that have an excessive cavity penalty (SCORE.RESTR.CAVITY > 1)
                        are removed from the RMSD analysis by rmsreport. A cavity penalty indicates
                        that the ligand pose is not entirely within the defined docking volume, and
                        hence the reported scores can not be trusted.</simpara>
                </note>
            </para>
        </formalpara>
        <formalpara>
            <title>Example results</title>
            <para>View the contents of each .rmcs file. For example, to look at the top three poses
                for each complex: <screen>$ head -3 *.rmcs</screen> You should find that most of the
                top-scoring poses have an RMSD less than 2A. Sample results for the SF3 scoring
                function are shown below, although as rDock uses a stochastic search your results
                may differ.
                <screen>
== 1byj.rmcs ==
1       -40.955 -33.472 -7.482  2.855   0.000
2       -40.063 -38.091 -1.972  1.457   0.000
3       -38.215 -35.048 -3.168  7.630   0.000

== 1c1e.rmcs ==
1       -27.945 -23.581 0.000   0.265   0.000
2       -27.945 -23.582 0.000   0.264   0.000
3       -27.943 -23.578 0.000   0.263   0.000

== 1cil.rmcs ==
1       -32.052 -28.150 0.517   0.736   0.000
2       -31.312 -27.746 0.844   0.847   0.000
3       -31.116 -26.617 -0.077  1.293   0.000

== 1d3h.rmcs ==
1       -33.697 -22.345 -1.669  2.081   0.000
2       -33.691 -22.268 -1.752  2.059   0.000
3       -33.684 -22.191 -1.801  2.055   0.000

== 1koc.rmcs ==
1       -36.951 -37.164 -0.751  2.549   0.000
2       -36.562 -37.267 -0.341  2.452   0.000
3       -36.538 -37.317 -0.339  2.393   0.000

== 1lna.rmcs ==
1       -23.888 -24.112 0.224   1.255   0.000
2       -23.765 -23.956 0.191   1.114   0.000
3       -23.720 -23.496 -0.224  1.142   0.000

== 1mld.rmcs ==
1       -28.396 -28.905 0.957   1.697   0.000
2       -28.215 -28.151 0.410   1.246   0.000
3       -28.124 -28.232 0.436   1.508   0.000

== 1mts.rmcs ==
1       -38.309 -34.850 -0.727  1.313   0.000
2       -38.162 -35.351 -0.395  1.389   0.000
3       -37.852 -34.274 -0.869  1.157   0.000

== 1wap.rmcs ==
1       -42.289 -34.939 0.040   0.494   0.000
2       -41.818 -34.907 0.206   0.459   0.000
3       -41.769 -35.130 0.209   0.939   0.000

== 5abp.rmcs ==
1       -43.287 -38.021 0.370   0.886   0.000
2       -42.811 -37.664 0.367   0.893   0.000
3       -42.684 -37.426 0.361   0.907   0.000

== 6rnt.rmcs ==
1       -29.970 -26.189 -4.422  1.760   0.000
2       -29.368 -24.156 -5.368  1.356   0.000
3       -29.233 -24.059 -5.349  1.406   0.000
            </screen>
            </para>
        </formalpara>
    </chapter>
</book>
